package ca.sheridancollege.benerayj.controller;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataAccessException;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import ca.sheridancollege.benerayj.bean.BotRequest;
import ca.sheridancollege.benerayj.bean.Pet;
import ca.sheridancollege.benerayj.repository.PetRepository;
import ca.sheridancollege.benerayj.services.BotServiceImpl;
import lombok.AllArgsConstructor;

@RestController
@AllArgsConstructor
@RequestMapping("/api/pet")
public class BackendController {
	
	@Autowired
	private PetRepository petRepo;
	private final BotServiceImpl botService;
	
	// Creating prompts for chatGPT
	private static final String[] SUGGEST_NAME = 
			{ 
			"give me a cute name for a penguin robot, use only one word please",
			"give me a one word name for a robot penguin arduino pet",
			"give me a one word name for a penguin",
			"give me a one word name for a robot pet",
			"give me a one word name for a penguin pet" 
			};


	/**
	 * 
	 * Retrieves a list of all pet records from the pet repository using HTTP GET
	 * method.
	 * 
	 * @param model The model object to be populated with the list of pet records.
	 * @return A list of pet objects containing the data retrieved from the
	 *         repository.
	 * @throws DataAccessException If there is an error while accessing the pet
	 *                             repository.
	 */
	@GetMapping(value = { "/", "" })
	public List<Pet> pet(Model model, @RequestParam String name) throws DataAccessException {
		if (name != null) {
			return petRepo.findByName(name);
		}
		
		return petRepo.findAll();
	}

	/**
	 * 
	 * Creates a new pet record in the pet repository using HTTP POST method.
	 * 
	 * @param pet The pet object containing the data to be added to the repository.
	 * @return A string message indicating the success of the operation, including
	 *         the index of the added record.
	 * @throws IllegalArgumentException If the Content-type header is not set to
	 *                                  "application/json".
	 * @throws DataAccessException      If there is an error while accessing the pet
	 *                                  repository.
	 */
	@PostMapping(value = { "/", "" }, headers = "Content-type=application/json")
	public String createPet(@RequestBody Pet pet) throws IllegalArgumentException, DataAccessException {
		Pet p = petRepo.save(pet);
		return "Record added at index " + p.getId();
	}

	/**
	 * This endpoint requests a set amount of names to be generated by chatgpt.
	 * 
	 * @param suggestionSize
	 * @return List of suggested names
	 */
	@GetMapping("/suggestNames/{size}")
	public List<String> suggestNames(@PathVariable(name = "size") int suggestionSize) {
		String q = "Generate " + suggestionSize + " names that fits a cute penguin companion. The output will be a JSON array.";
		List<String> names = new ArrayList<>(suggestionSize);
		System.out.println("Hello?");
		

		ObjectMapper o = new ObjectMapper();
		String[] newNames = new String[suggestionSize];
		
		String json = "";
		
		// Handle GPT limit
		try {
			BotRequest req = new BotRequest(q);
			// Fails when quota is reached
			List<Choice> res = botService.askQuestion(req).getChoices();
			if (res.size() > 0) {
				json = res.get(0).toString();
			}
		} catch(Exception e) {
			StringBuilder sb = new StringBuilder();
			sb.append("[\n");
			for(int i = 0; i < suggestionSize; i++) {
				sb.append("\t\"Foo\"");
				if (i == suggestionSize - 1) {
					sb.append("\n");
				} else {
					sb.append(",\n");
				}
			}
			sb.append("]");
			json = sb.toString();
			System.out.println(json);
		}
		
		// Handle Json deserialization failure
		try {
			newNames = o.readValue(json, String[].class);
		} catch (JsonProcessingException e1) {
			newNames = new String[suggestionSize];
			for (int i = 0; i < suggestionSize; i++) {
				newNames[i] = "ERROR";
			}		
			e1.printStackTrace();
		}
		
		
		for (String name : newNames) {
			names.add(name);
		}

		return names;
	}

	/**
	 * Performs a health check by returning a string message indicating successful
	 * execution.
	 * 
	 * @return A string message indicating successful health check.
	 */
	@GetMapping("/test")
	public String healthCheck() {
		return "HEALTH CHECK OK!";
	}

}
